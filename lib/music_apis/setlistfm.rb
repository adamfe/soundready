#
# This code was generated by Enunciate.
# http://enunciate.codehaus.org/
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

def clean_keys!(hash)
  return unless hash.is_a? Hash

  hash.keys.each do |k|
    # clean up the @ is in there
    if k.to_s.starts_with?("@")
      hash[k.to_s[1..-1]] = hash[k] 
      hash.delete(k)   
    end
  end

  hash.values.each do |h|
    if Array === h
      h.each{|vv| clean_keys!(vv) if Hash === vv }
    elsif Hash === h
      clean_keys!(h)
    end
  end
end

module Fm
module Setlist
module Api
module Model

class Set 
  attr_accessor :name
  attr_accessor :songs

  #initializes this Set with a json hash
  def init_jaxb_json_hash(_o)
    @name = String.from_json(_o['name']) unless _o['name'].nil?
    if !_o['song'].nil?
      @songs = Array.new
      _oa = _o['song']
      _oa = _o['song'].is_a?(Array) ? _o['song'] : [_o['song']]
      _oa.each { | _item | @songs.push Fm::Setlist::Api::Model::Song.from_json(_item) }
    end
  end

  # constructs a Set from a (parsed) JSON hash
  def self.from_json(o)
    if o.nil?
      return nil
    else
      clean_keys!(o)
      inst = new
      inst.init_jaxb_json_hash o
      return inst
    end
  end
end

class Song 
  attr_accessor :name
  attr_accessor :with
  attr_accessor :cover
  attr_accessor :info

  #initializes this Song with a json hash
  def init_jaxb_json_hash(_o)
    @name = String.from_json(_o['name']) unless _o['name'].nil?
    @with = Fm::Setlist::Api::Model::Artist.from_json(_o['with']) unless _o['with'].nil?
    @cover = Fm::Setlist::Api::Model::Artist.from_json(_o['cover']) unless _o['cover'].nil?
    @info = String.from_json(_o['info']) unless _o['info'].nil?
  end

  # constructs a Song from a (parsed) JSON hash
  def self.from_json(o)
    if o.nil?
      return nil
    else
      clean_keys!(o)
      inst = new
      inst.init_jaxb_json_hash o
      return inst
    end
  end
end

class Result 
  attr_accessor :total
  attr_accessor :page
  attr_accessor :itemsPerPage

  #initializes this Result with a json hash
  def init_jaxb_json_hash(_o)
    @total = Fixnum.from_json(_o['total']) unless _o['total'].nil?
    @page = Fixnum.from_json(_o['page']) unless _o['page'].nil?
    @itemsPerPage = Fixnum.from_json(_o['itemsPerPage']) unless _o['itemsPerPage'].nil?
  end

  # constructs a Result from a (parsed) JSON hash
  def self.from_json(o)
    if o.nil?
      return nil
    else
      clean_keys!(o)
      inst = new
      inst.init_jaxb_json_hash o
      return inst
    end
  end
end

class Setlists < Fm::Setlist::Api::Model::Result 
  # result list of setlists
  attr_accessor :list

  #initializes this Setlists with a json hash
  def init_jaxb_json_hash(_o)
    super _o
    if !_o['setlist'].nil?
      @list = Array.new
      _oa = _o['setlist'].is_a?(Array) ? _o['setlist'] : [_o['setlist']]
      _oa.each { | _item | @list.push Fm::Setlist::Api::Model::Setlist.from_json(_item)}
    end
  end

  # constructs a Setlists from a (parsed) JSON hash
  def self.from_json(o)
    if o.nil?
      return nil
    else
      clean_keys!(o)
      inst = new
      inst.init_jaxb_json_hash o
      return inst
    end
  end
end

class Setlist 
  attr_accessor :id
  attr_accessor :eventDate
  attr_accessor :versionId
  attr_accessor :tour
  attr_accessor :lastFmEventId
  attr_accessor :artist
  attr_accessor :venue
  attr_accessor :sets
  attr_accessor :info
  attr_accessor :url

  #initializes this Setlist with a json hash
  def init_jaxb_json_hash(_o)
    @id = String.from_json(_o['id']) unless _o['id'].nil?
    @eventDate = String.from_json(_o['eventDate']) unless _o['eventDate'].nil?
    @versionId = String.from_json(_o['versionId']) unless _o['versionId'].nil?
    @tour = String.from_json(_o['tour']) unless _o['tour'].nil?
    @lastFmEventId = Fixnum.from_json(_o['lastFmEventId']) unless _o['lastFmEventId'].nil?
    @artist = Fm::Setlist::Api::Model::Artist.from_json(_o['artist']) unless _o['artist'].nil?
    @venue = Fm::Setlist::Api::Model::Venue.from_json(_o['venue']) unless _o['venue'].nil?
    if !_o['sets'].nil? && !_o['sets']['set'].nil?
      @sets = Array.new
      _oa = _o['sets']['set']
      _oa.each { | _item | @sets.push Fm::Setlist::Api::Model::Set.from_json(_item) if _item.is_a?(Hash) }
    end
    @info = String.from_json(_o['info']) unless _o['info'].nil?
    @url = String.from_json(_o['url']) unless _o['url'].nil?
  end

  # constructs a Setlist from a (parsed) JSON hash
  def self.from_json(o)
    if o.nil?
      return nil
    else
      clean_keys!(o)
      inst = new
      inst.init_jaxb_json_hash o
      return inst
    end
  end

  def song_list
    return [] if @sets.nil?

    songs = []
    @sets.each do |set|
      set.songs.each do |song|
        songs << song.name
      end
    end
    songs
  end
end

class Artists < Fm::Setlist::Api::Model::Result 
  # result list of artists
  attr_accessor :list

  #initializes this Artists with a json hash
  def init_jaxb_json_hash(_o)
    super _o
    if !_o['artist'].nil?
      @list = Array.new
      _oa = _o['artist'].is_a?(Array) ? _o['artist'] : [_o['artist']]
      _oa.each { | _item | @list.push Fm::Setlist::Api::Model::Artist.from_json(_item) }
    end
  end

  # constructs a Artists from a (parsed) JSON hash
  def self.from_json(o)
    if o.nil?
      return nil
    else
      clean_keys!(o)
      inst = new
      inst.init_jaxb_json_hash o
      return inst
    end
  end
end

class Artist 
  attr_accessor :disambiguation
  attr_accessor :mbid
  attr_accessor :name
  attr_accessor :sortName
  attr_accessor :url

  #initializes this Artist with a json hash
  def init_jaxb_json_hash(_o)
    @disambiguation = String.from_json(_o['disambiguation']) unless _o['disambiguation'].nil?
    @mbid = String.from_json(_o['mbid']) unless _o['mbid'].nil?
    @name = String.from_json(_o['name']) unless _o['name'].nil?
    @sortName = String.from_json(_o['sortName']) unless _o['sortName'].nil?
    @url = String.from_json(_o['url']) unless _o['url'].nil?
  end

  # constructs a Artist from a (parsed) JSON hash
  def self.from_json(o)
    if o.nil?
      return nil
    else
      clean_keys!(o)
      inst = new
      inst.init_jaxb_json_hash o
      return inst
    end
  end
end

class Venue 
  attr_accessor :id
  attr_accessor :name
  attr_accessor :city
  attr_accessor :url

  #initializes this Venue with a json hash
  def init_jaxb_json_hash(_o)
    @id = String.from_json(_o['id']) unless _o['id'].nil?
    @name = String.from_json(_o['name']) unless _o['name'].nil?
    @city = Fm::Setlist::Api::Model::City.from_json(_o['city']) unless _o['city'].nil?
    @url = String.from_json(_o['url']) unless _o['url'].nil?
  end

  # constructs a Venue from a (parsed) JSON hash
  def self.from_json(o)
    if o.nil?
      return nil
    else
      clean_keys!(o)
      inst = new
      inst.init_jaxb_json_hash o
      return inst
    end
  end
end

class City 
  attr_accessor :id
  attr_accessor :name
  attr_accessor :state
  attr_accessor :coords
  attr_accessor :country

  #initializes this City with a json hash
  def init_jaxb_json_hash(_o)
    @id = String.from_json(_o['id']) unless _o['id'].nil?
    @name = String.from_json(_o['name']) unless _o['name'].nil?
    @state = String.from_json(_o['state']) unless _o['state'].nil?
    @stateCode = String.from_json(_o['stateCode']) unless _o['stateCode'].nil?
    @coords = Fm::Setlist::Api::Model::Coords.from_json(_o['coords']) unless _o['coords'].nil?
    @country = Fm::Setlist::Api::Model::Country.from_json(_o['country']) unless _o['country'].nil?
  end

  # constructs a City from a (parsed) JSON hash
  def self.from_json(o)
    if o.nil?
      return nil
    else
      clean_keys!(o)
      inst = new
      inst.init_jaxb_json_hash o
      return inst
    end
  end
end


class Coords 
  attr_accessor :longitude
  attr_accessor :latitude

  #initializes this Coords with a json hash
  def init_jaxb_json_hash(_o)
    @longitude = Float.from_json(_o['longitude']) unless _o['longitude'].nil?
    @latitude = Float.from_json(_o['latitude']) unless _o['latitude'].nil?
  end

  # constructs a Coords from a (parsed) JSON hash
  def self.from_json(o)
    if o.nil?
      return nil
    else
      clean_keys!(o)
      inst = new
      inst.init_jaxb_json_hash o
      return inst
    end
  end
end

class Country 
  attr_accessor :name
  attr_accessor :code

  #initializes this Country with a json hash
  def init_jaxb_json_hash(_o)
    @name = String.from_json(_o['name']) unless _o['name'].nil?
    @code = String.from_json(_o['code']) unless _o['code'].nil?
  end

  # constructs a Country from a (parsed) JSON hash
  def self.from_json(o)
    if o.nil?
      return nil
    else
      clean_keys!(o)
      inst = new
      inst.init_jaxb_json_hash o
      return inst
    end
  end
end

end
end
end
end